using System;
using PDF_Digital_Signature;

class Program
{
    static void Main(string[] args)
    {
        PdfSigner signer = new PdfSigner(); // L·ªõp PdfSigner ƒë√£ c√≥ c·∫£ k√Ω v√† x√°c nh·∫≠n ch·ªØ k√Ω

        while (true)
        {
            Console.WriteLine("\n===== MENU CH√çNH =====");
            Console.WriteLine("1. T·∫°o ch·ª©ng ch·ªâ s·ªë");
            Console.WriteLine("2. K√Ω file PDF v·ªõi SHA-256");
            Console.WriteLine("3. Ki·ªÉm tra ch·ªØ k√Ω s·ªë trong file PDF");
            Console.WriteLine("4. Tho√°t");
            Console.Write("Ch·ªçn ch·ª©c nƒÉng: ");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    // T·∫°o ch·ª©ng ch·ªâ s·ªë
                    CertificateGenerator certGen = new CertificateGenerator();
                    certGen.CreateCertificate();
                    break;

                case "2":
                    // K√Ω file PDF
                    string pdfPath = @"Data/test.pdf";
                    string certPath = @"Data/HieuDrakonCert.pfx";
                    signer.SignPdfWithSHA256(pdfPath, certPath);
                    break;

                case "3":
                    // Ki·ªÉm tra ch·ªØ k√Ω s·ªë
                    string signedPdfPath = @"test-ƒë√£ k√Ω.pdf"; // M·∫∑c ƒë·ªãnh l√† file ƒë√£ k√Ω
                    PdfSignatureVerifier verifier = new PdfSignatureVerifier();
                    bool isValid = verifier.VerifyPdfSignature(signedPdfPath);
                    if (isValid)
                    {
                        Console.WriteLine("‚úÖ X√°c nh·∫≠n ch·ªØ k√Ω th√†nh c√¥ng!");
                    }
                    else
                    {
                        Console.WriteLine("‚ùå X√°c nh·∫≠n ch·ªØ k√Ω th·∫•t b·∫°i!");
                    }
                    break;

                case "4":
                    Console.WriteLine("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh!");
                    return;

                default:
                    Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
                    break;
            }
        }
    }
}
